{"version":3,"sources":["todoList/input.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","props","for","style","display","flexDirection","fontSize","fontWeight","paddingTop","ariallabel","id","type","border","borderBottom","width","margin","padding","background","changed","itemValue","App","state","newItem","list","changedHandler","e","setState","target","value","addItemHandler","console","log","Math","random","slice","push","deleteItem","updateList","filter","item","key","this","className","textAlign","borderRadius","boxShadow","ItemValue","onClick","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sOA6BeA,EA3BE,SAAEC,GAAY,IAAD,EAiB1B,OACI,6BACI,2BAAOC,IAAI,YAAYC,MATZ,CACfC,QAAS,OACTC,cAAe,SACfC,SAAU,OACVC,WAAY,OACZC,WAAY,SAIR,oBAEG,8BAAOC,WAAW,iBAAiBC,GAAG,YAAYC,KAAK,OAAMR,MApBrD,CACfS,OAAQ,OACRC,aAAe,oBACfC,MAAO,MACPC,OAAQ,SACRC,QAAS,aACTV,SAAU,OACVW,WAAY,gBAaL,qBAAqF,QAArF,4BAAwG,oBAAxG,yBAAqIhB,EAAMiB,SAA3I,sBAA2JjB,EAAMkB,WAAjK,OCuEAC,G,wNAtFbC,MAAQ,CACNC,QAAS,GACTC,KAAM,I,EAURC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CACZJ,QAASG,EAAEE,OAAOC,S,EAItBC,eAAiB,WACfC,QAAQC,IAAI,iBAEZ,IAAMT,EAAS,CACbZ,GAAI,EAAIsB,KAAKC,SACbL,MAAO,EAAKP,MAAMC,QAAQY,SAItBX,EAAI,YAAO,EAAKF,MAAME,MAG5BA,EAAKY,KAAKb,GAGV,EAAKI,SAAS,CACZH,OACAD,a,EAGJc,WAAY,SAAC1B,GAEX,IAGM2B,EAHI,YAAO,EAAKhB,MAAME,MAGJe,QAAO,SAAAC,GAAI,OAAIA,EAAK7B,KAAOA,KACnD,EAAKgB,SAAS,CACZH,KAAMc,K,qDAxCHG,EAAKZ,GAEVa,KAAKf,SAAL,eACGc,EAAMZ,M,+BAwCA,IAAD,OAaR,OACE,yBAAKc,UAAU,OACb,4BAAQvC,MAdE,CACZwC,UAAW,WAcP,0DAEF,0BAAMxC,MAbO,CACfS,OAAQ,oBACRgC,aAAc,OACdC,UAAW,gCACX/B,MAAO,MACPC,OAAQ,SACRC,QAAS,eAQH,kBAAC,EAAD,CAAU8B,UAAWL,KAAKpB,MAAMC,QAASJ,QAASuB,KAAKjB,iBACvD,4BAAQkB,UAAU,WAAWK,QAAWN,KAAKZ,eAAgBpB,WAAW,cAAxE,QACF,wBAAIiC,UAAU,QACXD,KAAKpB,MAAME,KAAKyB,KAAI,SAAAT,GACnB,OACE,wBAAIC,IAAKD,EAAK7B,GAAIgC,UAAU,YACzBH,EAAKX,MACN,4BAAQc,UAAU,YAAYK,QAAW,kBAAI,EAAKX,WAAWG,EAAK7B,MAAlE,gB,GA5ECuC,cCMCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,a","file":"static/js/main.471e8a0d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst TodoList = ( props ) => {\r\n    const inputStyle = {\r\n        border: 'none',\r\n        borderBottom : '2px solid #293241',\r\n        width: '60%',\r\n        margin: '20px 0',\r\n        padding: ' 10px 12px',\r\n        fontSize: '20px',\r\n        background: 'transparent',\r\n    }\r\n    const labelStyle = {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        fontSize: '28px',\r\n        fontWeight: 'bold',\r\n        paddingTop: '20px'\r\n    }\r\n    return (\r\n        <div>\r\n            <label for=\"inputTask\" style={labelStyle}>\r\n                Add a task ‚úç \r\n               <input ariallabel=\"Type in a task\" id=\"inputTask\" type=\"text\"style={inputStyle} type=\"text\" placeholder=\"Add an item here\" onChange={props.changed} value={props.itemValue}></input>\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React, { Component } from 'react';\nimport TodoList from './todoList/input';\nimport './App.css';\nimport './index.css';\n\n\n class App extends Component {\n\n  state = {\n    newItem: \"\",\n    list: [],\n  }\n\n  update(key, value) {\n    //update the state\n    this.setState({\n      [key]: value\n    })\n  }\n\n  changedHandler = (e) => {\n    this.setState({\n      newItem: e.target.value,\n    })\n  }\n\n  addItemHandler = () => {\n    console.log('Added an item');\n    //create an item with a unique id\n    const newItem ={\n      id: 1 + Math.random(), \n      value: this.state.newItem.slice()\n    }\n\n    //copy of list \n    const list = [...this.state.list];\n\n    //add new item to list\n    list.push(newItem);\n\n    //update the state \n    this.setState({ \n      list,\n      newItem\n    })\n  }\n  deleteItem =(id)=>{\n    //copy the current list item \n    const list = [...this.state.list];\n\n    //filter out items been deleted\n    const updateList = list.filter(item => item.id !== id);\n    this.setState({\n      list: updateList\n    })\n  }\n  render () {\n    const center ={\n      textAlign: 'center'\n    }\n\n    const container ={\n      border: '2px solid #293241',\n      borderRadius: '30px',\n      boxShadow: '0 5px 50px rgba(0, 0, 0, 0.2)',\n      width: '40%',\n      margin: '0 auto',\n      padding: '20px 140px',\n    }\n    return (\n      <div className=\"App\">\n        <header style={center}>\n          <h1>My Todo List üìñ</h1>\n        </header>\n        <main style={container}>\n            <TodoList ItemValue={this.state.newItem} changed={this.changedHandler}/>\n            <button className=\"btnStyle\" onClick = {this.addItemHandler} ariallabel=\"add button\"> Add</button>\n          <ul className=\"list\">\n            {this.state.list.map(item => {\n              return (\n                <li key={item.id} className=\"listItem\">\n                  {item.value}\n                  <button className=\"btnDelete\" onClick = {()=>this.deleteItem(item.id)}>X</button>\n                </li>\n              )\n            })}\n          </ul>\n        </main>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}